#!/bin/sh
SRC=$(pwd)/src
DST=$(pwd)/dst
DRAFTS=$(pwd)/src/drafts
TEMPLATES=$(pwd)/templates
ENTRIES=$(pwd)/dst/entries
TAGS=$(pwd)/tags.txt
SITE="example.com"

[ -z "$EDITOR" ] && EDITOR=/usr/bin/nano

# Create needed directories if they don't already exist.
[ -d "$DRAFTS" ] || ( mkdir -p "$DRAFTS" && printf "Created %s\n" "$DRAFTS"; )    
[ -d "$ENTRIES" ] || ( mkdir -p "$ENTRIES" && printf "Created %s\n" "$ENTRIES"; )    
[ -d "$TEMPLATES" ] || ( mkdir -p "$TEMPLATES" && printf "Created %s\n" "$TEMPLATES"; )    

# Make a new blog entry
newpost () {
        filepath="$SRC/$1.md";
        [ -z "$1" ] && printf "Entry name cannot be empty!\n" && exit 1
        if [ -f "$filepath" ]; then
                printf "%s Already exists!\n" "$1";
        else
                DATE=$(date --rfc-3339="ns" | cut -d'.' -f1);
                "$EDITOR" "$filepath";
                sed -i -e "1s/^/<!---the creation date is: $DATE --->\n/" \
                       -e "1s/^/<!---Generated by esbu--->\n/" "$filepath";
                printf "Added %s to src, ready to build\n" "$1"
        fi
}

# Edit already built entry
editpost() {
        [ -z "$1" ] && printf "Entry name cannot be empty!\n" \
                  && printf "List of entries:\n" \
                  && find "$SRC" -maxdepth 1 -type f -exec basename {} \; | cut -d'.' -f1 \
                  && exit 1;

        filepath="$SRC/$1.md";
        if [ -f "$filepath" ]; then
                [ -f "$ENTRIES/$1.html" ] && rm "$ENTRIES/$1.html"
                "$EDITOR" "$filepath";
        else
                printf "%s Doesn't exist!\n" "$1"
                printf "List of entries:\n"
                find "$SRC" -maxdepth 1 -type f -exec basename {} \; | cut -d'.' -f1;

        fi
}

# Create new drafts or edit existing drafts
editdrafts () {
        if [ -z "$1" ]; then
                printf "No draft name provided.\nDrafts:\n"
                find "$DRAFTS" -type f -exec basename {} \; | cut -d'.' -f1
                printf "\nexample : esbu draft *Draft Name*\n"
                exit
        else
                # check if draft already exists
                if [ -f "$DRAFTS"/"$1".md ]; then
                        printf "%s has been edited.\n" "$1"
                else
                        printf "Added %s to drafts.\n" "$1"
                fi
                # Open draft in editor
                "$EDITOR" "$DRAFTS"/"$1".md;
        fi
}

# move a draft to entries folder
finishdrafts () {
        if [ -z "$1" ]; then
                printf "No draft selected.\nDrafts:\n"
                find "$DRAFTS" -type f -exec basename {} \; | cut -d'.' -f1
                printf "\nexample : esbu draft *Draft Name*\n"
                exit
        else
                if [ -f "$DRAFTS"/"$1".md ];then
                        mv "$DRAFTS"/"$1".md "$SRC"/;
                        DATE=$(date --rfc-3339="ns" | cut -d'.' -f1);
                        sed -i -e "1s/^/<!---the creation date is: $DATE --->\n/" \
                               -e "1s/^/<!---Generated by esbu--->\n/" "$SRC"/"$1".md;
                        printf "moved %s to src\n" "$1"
                else
                        printf "Draft Doesn't exist!\nDrafts:\n"
                        find "$DRAFTS" -type f -exec basename {} \; | cut -d'.' -f1
                        printf "\nexample : esbu draft *Draft Name*\n"
                        exit
                fi
        fi

}

# Get date from already published entry
getdate () {
        filedir=$(echo "$1" | sed -e "s/dst\/entries/src/" -e "s/\.html/\.md/")
        date -R -d "$(grep -h -m 1 "the creation date is: " "$filedir" | sed -e "s/<\!---the creation date is: //" -e "s/--->//g")" | cut -c -16 | cut -c 6-; 
}

# creates index.html alongside the summary of the most recent blog post
addsummary () {
        cat "$TEMPLATES"/index.html > "$DST"/index.html
        # Take 5 of the latest posts and order them from new to oldest.
        t=$(echo "$LATEST" | tail -n1);
        DATE=$(getdate "$t")
        filename=$(basename "$t")

        # Use the first markdown heading as the Title.
        TITLE=$(grep -m 1 "#" "$SRC"/"${filename%.html}".md | tr -d '#' )
        SUMMARY=$(sed -e "s/#.*//g" -e "s/.*<.*//g" "$SRC"/"${filename%.html}".md | tr "\n" " " | head -c400)
        sed -i "/%ENTRIES%/a <p style='line-height:0px;margin-left:60%;text-align:center'><a href='https://$SITE/entries/$filename'> read more <\/a><//p>" "$DST"/index.html
        sed -i "/%ENTRIES%/a <p style='font:0.9em sans-serif;margin-right:30px'>$SUMMARY... <//p>" "$DST"/index.html
        sed -i "/%ENTRIES%/a <p style='font:0.8em sans-serif;text-align:center;margin-right:5%;margin-top:0%'>Date: $DATE</p><hr style='margin-right:30px'>" "$DST"/index.html
        sed -i "/%ENTRIES%/a <p style='font:1.2em sans-serif;text-align:center;margin-right:5%;margin-bottom:0%'>$TITLE</p>" "$DST"/index.html
        sed -i "s/%ENTRIES%//" "$DST"/index.html;
        sed -i "s/%DATE%/$DATE/" "$DST"/index.html; 
}

# Sort .md files in $SRC in order of creation time
sortfiles() {
        #Don't sort if there's only one entry.
        size=$(find "$SRC" -maxdepth 1 -type f -name "*.md" | wc -l )
        if [ "$size" = 1 ]; then
                find "$SRC" -maxdepth 1 -type f -name "*.md" -exec basename {} \;   
        else  
                #Create a list of entries alongside their creation date seperated by spaces, each at a new line
                LIST=$(find "$SRC" -maxdepth 1 -type f -print0 | xargs -0 grep -m 1 "the creation date is:" | sed -e "s:.*/\(.*\):\1:g" -e "s/:<\!---the creation date is://" -e "s/ --->//g" );
                # Iterate over the sorted dates, find the corresponding entry and print it.
                for d in $( echo "$LIST" | sed -e "s/.*\.md //" | sort -n -k3 | tr " " "." ); do
                        date=$(echo "$d" | tr "." " ");
                        echo "$LIST" | grep "$date" | cut -d' ' -f1;
                done
        fi
}

# Create "blogpage.html" which is page containing a rolling view of all blog posts.
blogpage () {
        cat "$TEMPLATES"/blogpage.html > "$DST"/blogpage.html;
        for t in $LATEST;
        do
                DATE=$(getdate "$t") # Set the date
                filename=$(basename "$t");
                # Use the first markdown heading as the Title.
                TITLE=$(grep -m 1 "#" "$SRC"/"${filename%.html}".md | tr -d '#' )
                sed -i "/%ENTRIES%/a <li>$DATE -<a href='https://$SITE/entries/$filename'>$TITLE <\/a><\/li>" "$DST"/blogpage.html; 
        done
        sed -i "s/%ENTRIES%//" "$DST"/blogpage.html;
}

# Adds a blog post to rss.xml
additem () {
        DATE=$(date -R -d "$(grep -h -m 1 "the creation date is: " "$1" | sed -e "s/<\!---the creation date is: //" -e "s/--->//g")" )

        TITLE=$(grep -m 1 "#" "$1" | tr -d '#' ); # Use the first heading as the Title.

        cat "$TEMPLATES"/item.xml >> "$DST"/rss.xml;
        sed -i -e "s:%NAME%:$TITLE:" \
            -e "s/%URL%/entries\/${2%.md}.html/" \
            -e "s/%DATE%/$DATE/" -e "s/%CONTENT%]]><\/description>//" "$DST"/rss.xml;

        cat "$3" >> "$DST"/rss.xml;
        sed -i -e 's/\/> <!---height=//g' \
            -e 's/px--->/\/>/g' "$DST"/rss.xml;

        echo "]]></description>" >> "$DST"/rss.xml;
        echo "</item>" >> "$DST"/rss.xml;
}

# create tags.html using the template and information present in tags.txt
addtags() {
        mkdir -p "$DST"/tags
        # for files that have $1 as a tag, add their link under %TAGS% then proceed by adding #$1 on top of them
        taglist=$(sed "s/.*: //" "$TAGS" | tr " " "\n" | sort | uniq) # get a unique list of all of the tags used in tags.txt
        for tag in $taglist;
        do
                sed -i "/%TAGS%/a <a href='https://$SITE/tags/$tag.html'>$tag <\/a> | " "$DST"/blogpage.html; # Add tags to blogpage.html
                cat "$TEMPLATES"/tags.html > "$DST"/tags/"$tag".html # Create tags.html
                files=$(grep "$tag" "$TAGS" | cut -d' ' -f1 | sed "s/.$//") # get filepath of every file that has the tag $tag from tags.txt
                for entry in $files;
                do
                        entrybn=$(basename "$entry") # get entry basename
                        # Get date and title from $entry and construct each item.
                        TITLE=$(grep -m 1 "#" "$entry" | tr -d '#' ); # Use the first heading as the Title.
                        DATE=$(getdate "$entry") # Set the date
                        sed -i "/%TAGS%/a <li>$DATE -<a href='https://$SITE/entries/${entrybn%.md}.html'>$TITLE <\/a><\/li>" "$DST"/tags/"$tag".html; 
        
                done

                # Add tag as title
                sed -i "s/%TITLE%/$tag | emadp.xyz/" "$DST"/tags/"$tag".html; 
                sed -i "/%TAGS%/a <h1> $tag </h1>" "$DST"/tags/"$tag".html; 
                sed -i "s/%TAGS%//" "$DST"/tags/"$tag".html;
        done 

        # Add tags to entries
        
        files=$(sed "s/md:.*/md/" "$TAGS") # get filepath of every file that has the tag $tag from tags.txt
        for entry in $files;
        do
                entrybn=$(basename "$entry") # get entry basename
                taglist=$(grep $entrybn $TAGS | sed "s/.*md: //"| tr " " "\n" | sort | uniq ) # get a unique list of all of the tags given to $entry
                for tag in $taglist;
                do
                        sed -i "/%TAGS%/a <a href='https://$SITE/tags/$tag.html'>$tag <\/a> |  " "$ENTRIES"/"${entrybn%.md}".html; 
                done
                sed -i "/%TAGS%/a  |  " "$ENTRIES"/"${entrybn%.md}".html; 
        done
        
        # Delete %TAGS%  from files
        files=$(find "$ENTRIES" -name "*.html") # get filepath of every file that has the tag $tag from tags.txt
        for entry in $files;
        do
                entrybn=$(basename "$entry") # get entry basename
                taglist=$(grep $entrybn $TAGS | sed "s/.*md: //"| tr " " "\n" | sort | uniq ) # get a unique list of all of the tags given to $entry
                sed -i "s/%TAGS%//" "$ENTRIES"/"$entrybn";
        done

        # Complete blogpage tags and Remove %TAGS% from blogpage.html
        sed -i "/%TAGS%/a | " "$DST"/blogpage.html; # Add | to the beginning of Tags
        sed -i "s/%TAGS%//" "$DST"/blogpage.html;
}

# Make new individual entry
makepage () { 
        NAME=$(grep -m 1 "#" "$SRC/$1" | tr -d '#' ); # Use the first heading as the Name.

        sed "/%CONTENT%/r $2" "$TEMPLATES"/entry.html \
                | sed -e 's/%CONTENT%//' \
                        -e "s:%TITLE%:$NAME:" \
                        > "$ENTRIES"/"${1%.md}".html
}

# Take all markdown files in src/ (excluding drafts) and create corresponding html files in entries/,
# also creates/updates rss feed , blogpage and index.html
build () {

        head -n -3 "$TEMPLATES"/rss.xml > "$DST"/rss.xml # initialize rss.xml to add items to later

        # Take all of the latest posts and order them from new to oldest.
        LATEST=$(sortfiles | sed -e "s:^:$ENTRIES/:g" -e "s/\.md/\.html/g" )

        # sort .md files by time from oldest to newest.
        FILES=$(sortfiles | sed -e "s:^:$SRC/:g" | tac)
        for entry in $FILES;
        do
                file=$(basename "$entry");
                RAWHTML=$ENTRIES/${file%.md}-tmp.html;
               
                markdown -f fencedcode "$entry" | \
                        sed -e 's/\/> <!---height=/ style="width:100%;height:auto;max-width:/g' \
                            -e 's/px--->/px" \/>/g' > "$RAWHTML";

                [ -f "$ENTRIES"/"${file%.md}".html ] || makepage "$file" "$RAWHTML";
                additem "$entry" "$file" "$RAWHTML" # Add entry to rss.xml 
                [ -f "$RAWHTML" ] && rm "$RAWHTML" 
        done

        echo "</channel>" >> "$DST"/rss.xml
        echo "</rss>" >> "$DST"/rss.xml
        addsummary;
        blogpage;
        [ -f tags.txt ] && addtags; # ONLY ADD TAGS IF tags.txt is present
}

tree () {
        drafts=$(find "$DRAFTS" -maxdepth 1 -type f -exec basename {} \; | cut -d'.' -f1)
        entries=$(find "$ENTRIES" -maxdepth 1 -type f -exec basename {} \; | cut -d'.' -f1)
        printf "Entries:\n\n"
        for entry in $entries; do
                printf "- $entry.md\n"
        done
        printf "\nDrafts:\n\n"
        for draft in $drafts; do
                printf "- $draft.md\n"
        done
}

case $1 in
        n|new)    newpost "$2";; # Create a new markdown entry

        e|edit)    editpost "$2";; # Create a new markdown entry

        l|list)   printf "List of entries:\n"
                find "$SRC" -maxdepth 1 -type f -exec basename {} \; | cut -d'.' -f1;;

        d|editdraft)  editdrafts "$2";;

        fd|finishdraft)  finishdrafts "$2";;

        r|rename) mv "$SRC"/"$2".md "$SRC"/"$3".md 2>/dev/null \
                && printf "renamed %s to %s, ready to build.\n" "$2" "$3" \
                || printf "%s doesn't exist\n" "$2";
                [ -f "$ENTRIES"/"$2".html ] && rm "$ENTRIES"/"$2".html;;

        rm|remove) [ -n "$2" ] && [ -f "$ENTRIES"/"$2".html ] && rm "$ENTRIES"/"$2".html
                  [ -n "$2" ] && ( rm "$SRC"/"$2".md && printf "Removed %s from entries\n" "$2" || printf "\n%s doesn't exist\n" "$2" );
                exit 1;;

        b|build) build;;

        t|tree) tree;;

        *)      printf "USAGE: esbu OPTION arg1 [arg2]\n"
                printf "OPTIONS:\n"
                printf "\tn, new - create new blog post\n"
                printf "\te, edit - edit already existing blog posts\n"
                printf "\tl, list - list all blog entries\n"
                printf "\td, draft - edit or create drafts\n"
                printf "\tfd, finishdraft - move draft to src folder - ready to build\n"
                printf "\tb, build - build blog - ready to deploy\n"
                printf "\trm, remove - remove a given entry\n"
                printf "\tr, rename - rename a given entry\n"
                printf "\tt, tree - displays a tree of all entries and drafts\n"
                printf "EXAMPLES:\n"
                printf "\tesbu new newpost  => creates a new entry as newpost.md\n"
                printf "\tesbu list =>  lists all entries\n"
                printf "\tesbu rm newpost => removes newpost\n";;
esac
exit $?
